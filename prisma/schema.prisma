// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Niveau {
    id        String   @id @default(cuid())
    nom       String
    nbrClasses Int
    anneeScolaire String
    classes Classe[]

}
model Option {
    id        String   @id @default(cuid())
    nom       String
    description String
    departId String
    dept     Departement @relation(fields: [departId], references: [id])
}
model Classe {
    id        String   @id @default(cuid())
    nom       String
    niveau Niveau @relation(fields: [niveauId], references: [id])
    niveauId String
    modules Module[]
    enseignants User[]
    @@index([niveauId])
}
model Departement {
    id        String   @id @default(cuid())
    nom       String
    description String
    ups    Up[]
    options Option[]
    // enseignants User[]
}
model Up {
    id        String   @id @default(cuid())
    nom       String
    description String
    deptId String
    depart     Departement @relation(fields: [deptId], references: [id])
    enseignants User[]
}

model Module {
  id       String   @id @default(cuid())
  nom      String
  semestre Int
  periode String
  chargeHoraire Int @default(0)
  credits Int
  enseignants User[]
  classes Classe[]
  competences Competence[]
}

// Necessary for Next auth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Competence {
  id       String   @id @default(cuid())
  nom      String
  description String
  moduleId String
  module Module @relation(fields: [moduleId], references: [id])
  enseignants User[]
}

enum UserRole {
    ADMIN
    COORDINATEUR
    ENSEIGNANT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  etat String?
  details String?
  charge Int? @default(0)
  role         UserRole  @default(ENSEIGNANT)
  classes Classe[]
  modules Module[]
  up Up[]
  // departement Departement? @relation(fields: [id], references: [id])
  competences Competence[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
